name: Release
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    name: Build on ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Go 1.16
        uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - name: Check out project files
        uses: actions/checkout@v2
      - name: Extract version metadata
        id: meta
        run: |
          echo "::set-output name=os_arch::$(go env GOOS)-$(go env GOARCH)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Create macos dist
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }}
      - name: Create portable linux dist
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          make VERSION=${{ steps.meta.outputs.version_short }} extraldflags='-linkmode external -extldflags "-static"'
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.meta.outputs.os_arch }}
          path: build/dist/*.*
  deploy:
    name: Deploy to Cloudsmith
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: ${{ runner.temp }}/dist
      - name: Extract version metadata
        working-directory: ${{ env.DIST_DIR }}
        id: meta
        run: |
          dist_dir=${{ runner.temp }}/dist
          cd $dist_dir
          os_arch=()
          for f in */; do
            os_arch+=(${f%/})
          done
          cp ${dist_dir}/**/* ${dist_dir}/
          echo "::set-output name=dist_dir::${dist_dir}"
          echo "::set-output name=os_arch::${os_arch[@]}"
          echo "::set-output name=version_short::${GITHUB_REF##*/v}"
      - name: Setup Cloudsmith Maven
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'
          server-id: cloudsmith # this server id is in the generated pom.xml used to run `mvn deploy`
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Upload to Cloudsmith
        run: |-
          curl -1sLf 'https://artifacts.consensys.net/public/quorum-go-plugins/raw/names/utils/versions/latest/uploader.sh' \
            | bash -s ${{ steps.meta.outputs.dist_dir }} quorum-account-plugin-hashicorp-vault ${{ steps.meta.outputs.version_short }} ${{ steps.meta.outputs.os_arch }}
        env:
          MAVEN_USERNAME: '${{ secrets.CLOUDSMITH_USERNAME }}'
          MAVEN_PASSWORD: '${{ secrets.CLOUDSMITH_API_KEY }}'
